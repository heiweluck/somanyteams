Index: anonymousletter/src/main/java/com/somanyteam/event/dto/request/user/UserRegisterReqDTO.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.somanyteam.event.dto.request.user;\r\n\r\nimport io.swagger.annotations.ApiModel;\r\nimport io.swagger.annotations.ApiModelProperty;\r\nimport lombok.Data;\r\n\r\nimport javax.validation.constraints.NotBlank;\r\nimport java.util.Date;\r\n\r\n@Data\r\n@ApiModel(\"注册DTO\")\r\npublic class UserRegisterReqDTO {\r\n\r\n    @ApiModelProperty(value = \"用户名\", required = true)\r\n    @NotBlank(message = \"用户名可以为空，也可以不为空\")\r\n    private String username;\r\n\r\n    @ApiModelProperty(value = \"密码\", required = true)\r\n    @NotBlank(message = \"密码不能为空\")\r\n    private String password;\r\n\r\n    @ApiModelProperty(value = \"邮箱\", required = true)\r\n    @NotBlank(message = \"邮箱不能为空\")\r\n    private String email;\r\n\r\n    @ApiModelProperty(value = \"性别\", required = true)\r\n    @NotBlank(message = \"性别可以为空，也可以不为空\")\r\n    private Integer sex;\r\n\r\n    @ApiModelProperty(value = \"生日\", required = true)\r\n    @NotBlank(message = \"生日可以为空，也可以不为空\")\r\n    private Date birthday;\r\n\r\n    @ApiModelProperty(value = \"简介\", required = true)\r\n    @NotBlank(message = \"简介可以为空，也可以不为空\")\r\n    private String profile;\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/anonymousletter/src/main/java/com/somanyteam/event/dto/request/user/UserRegisterReqDTO.java b/anonymousletter/src/main/java/com/somanyteam/event/dto/request/user/UserRegisterReqDTO.java
--- a/anonymousletter/src/main/java/com/somanyteam/event/dto/request/user/UserRegisterReqDTO.java	(revision b71a0f9c50df0578aa5b2bfecbc2f1006ad100cb)
+++ b/anonymousletter/src/main/java/com/somanyteam/event/dto/request/user/UserRegisterReqDTO.java	(date 1636545256851)
@@ -11,27 +11,11 @@
 @ApiModel("注册DTO")
 public class UserRegisterReqDTO {
 
-    @ApiModelProperty(value = "用户名", required = true)
-    @NotBlank(message = "用户名可以为空，也可以不为空")
-    private String username;
-
-    @ApiModelProperty(value = "密码", required = true)
-    @NotBlank(message = "密码不能为空")
-    private String password;
-
     @ApiModelProperty(value = "邮箱", required = true)
     @NotBlank(message = "邮箱不能为空")
     private String email;
 
-    @ApiModelProperty(value = "性别", required = true)
-    @NotBlank(message = "性别可以为空，也可以不为空")
-    private Integer sex;
-
-    @ApiModelProperty(value = "生日", required = true)
-    @NotBlank(message = "生日可以为空，也可以不为空")
-    private Date birthday;
-
-    @ApiModelProperty(value = "简介", required = true)
-    @NotBlank(message = "简介可以为空，也可以不为空")
-    private String profile;
+    @ApiModelProperty(value = "密码", required = true)
+    @NotBlank(message = "密码不能为空")
+    private String password;
 }
Index: anonymousletter/src/main/java/com/somanyteam/event/controller/UserController.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.somanyteam.event.controller;\r\n\r\nimport cn.hutool.core.util.StrUtil;\r\nimport com.somanyteam.event.dto.request.user.UserLoginReqDTO;\r\nimport com.somanyteam.event.dto.request.user.UserRegisterReqDTO;\r\nimport com.somanyteam.event.dto.result.user.UserLoginResult;\r\nimport com.somanyteam.event.entity.User;\r\nimport com.somanyteam.event.service.UserService;\r\nimport com.somanyteam.event.util.PasswordUtil;\r\nimport com.somanyteam.event.util.RandomCodeUtil;\r\nimport com.somanyteam.event.util.ResponseMessage;\r\nimport io.swagger.annotations.Api;\r\nimport io.swagger.annotations.ApiOperation;\r\nimport io.swagger.annotations.ApiParam;\r\nimport org.apache.shiro.SecurityUtils;\r\nimport org.apache.shiro.authc.UsernamePasswordToken;\r\nimport org.apache.shiro.subject.Subject;\r\nimport org.springframework.beans.BeanUtils;\r\nimport org.springframework.beans.factory.annotation.Autowired;\r\nimport org.springframework.data.redis.core.RedisTemplate;\r\nimport org.springframework.data.repository.query.Param;\r\nimport org.springframework.mail.SimpleMailMessage;\r\nimport org.springframework.mail.javamail.JavaMailSender;\r\nimport org.springframework.validation.annotation.Validated;\r\nimport org.springframework.web.bind.annotation.PostMapping;\r\nimport org.springframework.web.bind.annotation.RequestBody;\r\nimport org.springframework.web.bind.annotation.RequestMapping;\r\nimport org.springframework.web.bind.annotation.RestController;\r\n\r\nimport java.util.Date;\r\n\r\n\r\n/**\r\n * @author zbr\r\n */\r\n@Api(tags = \"用户相关接口\")\r\n@RestController\r\n@RequestMapping(\"/user\")\r\npublic class UserController {\r\n\r\n    @Autowired\r\n    private UserService userService;\r\n\r\n    @ApiOperation(value = \"用户登录\")\r\n    @PostMapping(\"/login\")\r\n    public ResponseMessage<UserLoginResult> login(@RequestBody @Validated UserLoginReqDTO userLoginReqDTO){\r\n\r\n        Subject subject = SecurityUtils.getSubject();\r\n\r\n        UsernamePasswordToken token  = new UsernamePasswordToken(userLoginReqDTO.getEmail(), userLoginReqDTO.getPassword());\r\n        subject.login(token);\r\n\r\n        User loginUser = (User) subject.getPrincipal();\r\n        UserLoginResult result = new UserLoginResult();\r\n        BeanUtils.copyProperties(loginUser, result);\r\n\r\n        return ResponseMessage.newSuccessInstance(result, \"登录成功\");\r\n    }\r\n\r\n    /**\r\n     * 1.先发送邮件\r\n     *      保存验证码进redis，并设置过期时间\r\n     * 2.注册账号\r\n     *      在service层验证 code是否一致\r\n     *      邮箱，用户id（随机生成），密码\r\n     *      验证码不一致不通过，为空也不通过\r\n     *      必要选项每天也不通过\r\n     *      密码不符合标准也不通过\r\n     */\r\n    @ApiOperation(value = \"注册\")\r\n    @PostMapping(\"/register\")\r\n    public ResponseMessage register(@RequestBody @Validated UserRegisterReqDTO userRegisterReqDTO,String userCode) {\r\n        User user = new User();\r\n        boolean b = userService.checkCode(userRegisterReqDTO.getEmail(), userCode);\r\n        if (b){\r\n            //true，验证码一致\r\n            BeanUtils.copyProperties(userRegisterReqDTO, user);\r\n            user.setSalt(PasswordUtil.randomSalt());\r\n            // 原始密码默认与账号名称相同\r\n            user.setPassword(PasswordUtil.encryptPassword(user.getUsername(), user.getUsername(), user.getSalt()));\r\n            user.setIdentity(0);\r\n            user.setId(RandomCodeUtil.getRandom()); //随机生成一个随机数\r\n            user.setImgUrl(\"http://8.134.33.6/photo/a.png\");//默认头像图片链接\r\n            if (userService.saveUser(user) > 0) {\r\n                return ResponseMessage.newSuccessInstance(\"注册成功\");\r\n            } else {\r\n                return ResponseMessage.newErrorInstance(\"注册失败\");\r\n            }\r\n        }else {\r\n            //false，验证码不一致\r\n            return ResponseMessage.newErrorInstance(\"验证码错误，注册失败\");\r\n        }\r\n    }\r\n\r\n    @ApiOperation(value = \"发送邮件\")\r\n    @PostMapping(\"/sendEmail\")\r\n    public ResponseMessage sendEmail(@ApiParam(\"邮箱\") @Param(value = \"email\") String email) {\r\n        //拿到验证码，为空则发送邮件失败\r\n        String code = userService.sendEmail(email);\r\n        if (StrUtil.isEmpty(code)) {\r\n            return ResponseMessage.newErrorInstance(\"发送失败\");\r\n        } else {\r\n            //返回前端验证码，前端判断验证码是否输入正确\r\n            return ResponseMessage.newSuccessInstance(\"发送成功\",code);\r\n        }\r\n    }\r\n\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/anonymousletter/src/main/java/com/somanyteam/event/controller/UserController.java b/anonymousletter/src/main/java/com/somanyteam/event/controller/UserController.java
--- a/anonymousletter/src/main/java/com/somanyteam/event/controller/UserController.java	(revision b71a0f9c50df0578aa5b2bfecbc2f1006ad100cb)
+++ b/anonymousletter/src/main/java/com/somanyteam/event/controller/UserController.java	(date 1636547259092)
@@ -5,6 +5,8 @@
 import com.somanyteam.event.dto.request.user.UserRegisterReqDTO;
 import com.somanyteam.event.dto.result.user.UserLoginResult;
 import com.somanyteam.event.entity.User;
+import com.somanyteam.event.exception.user.ConfirmPswWrongException;
+import com.somanyteam.event.exception.user.PasswordNotStandardException;
 import com.somanyteam.event.service.UserService;
 import com.somanyteam.event.util.PasswordUtil;
 import com.somanyteam.event.util.RandomCodeUtil;
@@ -69,18 +71,33 @@
      */
     @ApiOperation(value = "注册")
     @PostMapping("/register")
-    public ResponseMessage register(@RequestBody @Validated UserRegisterReqDTO userRegisterReqDTO,String userCode) {
+    public ResponseMessage register(@RequestBody @Validated UserRegisterReqDTO userRegisterReqDTO,
+                                    String userCode,String confirmPsw) {
+        //校验密码是否为6-16位数字字母的组合
+        String passRegex = "^(?![0-9]+$)(?![a-zA-Z]+$)[0-9A-Za-z]{6,16}$";
+        boolean matches = userRegisterReqDTO.getPassword().matches(passRegex);
+        if (!matches){
+            throw new PasswordNotStandardException();
+        }
+
+        if (!userRegisterReqDTO.getPassword().equals(confirmPsw)){
+            //确认密码和密码不一致
+            throw new ConfirmPswWrongException();
+        }
+
         User user = new User();
         boolean b = userService.checkCode(userRegisterReqDTO.getEmail(), userCode);
         if (b){
             //true，验证码一致
             BeanUtils.copyProperties(userRegisterReqDTO, user);
-            user.setSalt(PasswordUtil.randomSalt());
-            // 原始密码默认与账号名称相同
-            user.setPassword(PasswordUtil.encryptPassword(user.getUsername(), user.getUsername(), user.getSalt()));
-            user.setIdentity(0);
             user.setId(RandomCodeUtil.getRandom()); //随机生成一个随机数
-            user.setImgUrl("http://8.134.33.6/photo/a.png");//默认头像图片链接
+            user.setUsername("偷心盗贼"); //设置默认用户名
+            user.setIdentity(0);
+            user.setPassword(PasswordUtil.encryptPassword(user.getUsername(), user.getPassword(), user.getSalt()));
+            user.setSalt(PasswordUtil.randomSalt());
+            user.setImgUrl("https://8.134.33.6/photo/a.png"); //默认头像图片链接，需要转为https
+            user.setCreateTime(new Date());
+
             if (userService.saveUser(user) > 0) {
                 return ResponseMessage.newSuccessInstance("注册成功");
             } else {
Index: anonymousletter/src/main/java/com/somanyteam/event/service/impl/UserServiceImpl.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.somanyteam.event.service.impl;\r\n\r\nimport cn.hutool.core.util.ObjectUtil;\r\nimport cn.hutool.core.util.StrUtil;\r\nimport com.baomidou.mybatisplus.core.conditions.query.QueryWrapper;\r\nimport com.somanyteam.event.entity.User;\r\nimport com.somanyteam.event.exception.user.UserEmailNotMatchException;\r\nimport com.somanyteam.event.exception.user.UserEnterEmptyException;\r\nimport com.somanyteam.event.exception.user.UserExistException;\r\nimport com.somanyteam.event.exception.user.UserNotExistException;\r\nimport com.somanyteam.event.mapper.UserMapper;\r\nimport com.somanyteam.event.service.UserService;\r\n\r\n\r\nimport com.somanyteam.event.util.PasswordUtil;\r\nimport com.somanyteam.event.util.RandomCodeUtil;\r\nimport org.springframework.beans.factory.annotation.Autowired;\r\nimport org.springframework.data.redis.core.RedisTemplate;\r\nimport org.springframework.mail.MailSendException;\r\nimport org.springframework.mail.SimpleMailMessage;\r\nimport org.springframework.mail.javamail.JavaMailSender;\r\nimport org.springframework.stereotype.Service;\r\n\r\nimport java.util.Date;\r\nimport java.util.concurrent.TimeUnit;\r\n\r\n@Service(\"userService\")\r\npublic class UserServiceImpl implements UserService {\r\n    @Autowired\r\n    private UserMapper userMapper;\r\n\r\n    @Autowired\r\n    private JavaMailSender javaMailSender;\r\n\r\n    @Autowired\r\n    private RedisTemplate redisTemplate;\r\n\r\n    @Override\r\n    public User login(String email, String password) {\r\n\r\n        if(StrUtil.isEmpty(email) || StrUtil.isEmpty(password)){\r\n            throw new UserEnterEmptyException();\r\n        }\r\n        if(!email.matches(\"[a-zA-Z0-9]+@[a-zA-Z0-9]+\\\\.[a-zA-Z0-9]+\")){\r\n            throw new UserEmailNotMatchException();\r\n        }\r\n        QueryWrapper<User> wrapper = new QueryWrapper<>();\r\n        wrapper.eq(\"email\", email);\r\n        User user = userMapper.selectOne(wrapper);\r\n\r\n        if(ObjectUtil.isNull(user)){\r\n            throw new UserNotExistException();\r\n        }\r\n        PasswordUtil.matches(user, password);\r\n        return user;\r\n    }\r\n\r\n    @Override\r\n    public int saveUser(User user) {\r\n        QueryWrapper<User> wrapper = new QueryWrapper<>();\r\n        wrapper.eq(\"email\", user.getEmail());\r\n        User existUser = userMapper.selectOne(wrapper);\r\n        if (ObjectUtil.isNotNull(existUser)) {\r\n            throw new UserExistException();\r\n        }\r\n        return userMapper.insert(user);\r\n    }\r\n\r\n    @Override\r\n    public String sendEmail(String email) {\r\n        int count;\r\n        if (StrUtil.isEmpty(email)){\r\n            throw new UserEnterEmptyException();\r\n        }\r\n        if(!email.matches(\"[a-zA-Z0-9]+@[a-zA-Z0-9]+\\\\.[a-zA-Z0-9]+\")){\r\n            throw new UserEmailNotMatchException();\r\n        }\r\n        SimpleMailMessage msg = new SimpleMailMessage();\r\n        String code = RandomCodeUtil.getRandom();\r\n        msg.setSubject(\"匿名信邮箱验证\");\r\n        msg.setFrom(\"1247054987@qq.com\");\r\n        msg.setTo(email); // 设置邮件接收者，可以有多个接收者\r\n        msg.setSentDate(new Date());\r\n        msg.setText(\"hello 欢迎访问匿名信网站，您的验证码为：\"+code);\r\n        try {\r\n            javaMailSender.send(msg);\r\n            redisTemplate.opsForValue().set(\"code_\"+email,code);\r\n            redisTemplate.expire(\"code_\"+email,10, TimeUnit.MINUTES);\r\n            count = 1;\r\n        }catch (MailSendException e){\r\n            System.out.println(e);\r\n            count = 0;\r\n        }\r\n\r\n        if (count == 1){\r\n            //发送成功\r\n            return code;\r\n        }else {\r\n            return null;\r\n        }\r\n    }\r\n\r\n    @Override\r\n    public boolean checkCode(String email,String userCode) {\r\n        if (StrUtil.isEmpty(email) || StrUtil.isEmpty(userCode)){\r\n            throw new UserEnterEmptyException();\r\n        }\r\n        //从数据库拿到该邮箱的验证码\r\n        String code = (String) redisTemplate.opsForValue().get(\"code_\"+email);\r\n        //验证码一致，返回true\r\n        return userCode.equals(code);\r\n    }\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/anonymousletter/src/main/java/com/somanyteam/event/service/impl/UserServiceImpl.java b/anonymousletter/src/main/java/com/somanyteam/event/service/impl/UserServiceImpl.java
--- a/anonymousletter/src/main/java/com/somanyteam/event/service/impl/UserServiceImpl.java	(revision b71a0f9c50df0578aa5b2bfecbc2f1006ad100cb)
+++ b/anonymousletter/src/main/java/com/somanyteam/event/service/impl/UserServiceImpl.java	(date 1636545551859)
@@ -57,6 +57,9 @@
 
     @Override
     public int saveUser(User user) {
+        if (ObjectUtil.isNull(user)) {
+            throw new UserEnterEmptyException();
+        }
         QueryWrapper<User> wrapper = new QueryWrapper<>();
         wrapper.eq("email", user.getEmail());
         User existUser = userMapper.selectOne(wrapper);
Index: anonymousletter/src/main/java/com/somanyteam/event/exception/user/PasswordNotStandardException.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/anonymousletter/src/main/java/com/somanyteam/event/exception/user/PasswordNotStandardException.java b/anonymousletter/src/main/java/com/somanyteam/event/exception/user/PasswordNotStandardException.java
new file mode 100644
--- /dev/null	(date 1636547259103)
+++ b/anonymousletter/src/main/java/com/somanyteam/event/exception/user/PasswordNotStandardException.java	(date 1636547259103)
@@ -0,0 +1,9 @@
+package com.somanyteam.event.exception.user;
+
+public class PasswordNotStandardException extends UserException {
+    private static final long serialVersionUID = 1L;
+
+    public PasswordNotStandardException() {
+        super("user.password.not.standard", null);
+    }
+}
Index: anonymousletter/src/main/resources/messages.properties
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+># \\u9519\\u8BEF\\u4FE1\\u606F\r\n# user/\\u7528\\u6237\r\nuser.enter.empty = \\u8D26\\u53F7\\u540D/\\u5BC6\\u7801\\u4E3A\\u7A7A\r\nuser.not.exist = \\u8D26\\u53F7\\u4E0D\\u5B58\\u5728\r\nuser.blocked = \\u8D26\\u53F7\\u5C01\\u7981\r\nuser.password.not.match = \\u8D26\\u53F7\\u4E0D\\u5B58\\u5728/\\u5BC6\\u7801\\u9519\\u8BEF\r\nuser.email.not.match=\\u7528\\u6237\\u90AE\\u7BB1\\u683C\\u5F0F\\u4E0D\\u5339\\u914D
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/anonymousletter/src/main/resources/messages.properties b/anonymousletter/src/main/resources/messages.properties
--- a/anonymousletter/src/main/resources/messages.properties	(revision b71a0f9c50df0578aa5b2bfecbc2f1006ad100cb)
+++ b/anonymousletter/src/main/resources/messages.properties	(date 1636534848297)
@@ -2,6 +2,8 @@
 # user/\u7528\u6237
 user.enter.empty = \u8D26\u53F7\u540D/\u5BC6\u7801\u4E3A\u7A7A
 user.not.exist = \u8D26\u53F7\u4E0D\u5B58\u5728
+## 编码有问题
+user.exist = 用户已存在
 user.blocked = \u8D26\u53F7\u5C01\u7981
 user.password.not.match = \u8D26\u53F7\u4E0D\u5B58\u5728/\u5BC6\u7801\u9519\u8BEF
 user.email.not.match=\u7528\u6237\u90AE\u7BB1\u683C\u5F0F\u4E0D\u5339\u914D
\ No newline at end of file
Index: anonymousletter/src/main/java/com/somanyteam/event/exception/user/ConfirmPswWrongException.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/anonymousletter/src/main/java/com/somanyteam/event/exception/user/ConfirmPswWrongException.java b/anonymousletter/src/main/java/com/somanyteam/event/exception/user/ConfirmPswWrongException.java
new file mode 100644
--- /dev/null	(date 1636547189033)
+++ b/anonymousletter/src/main/java/com/somanyteam/event/exception/user/ConfirmPswWrongException.java	(date 1636547189033)
@@ -0,0 +1,9 @@
+package com.somanyteam.event.exception.user;
+
+public class ConfirmPswWrongException extends UserException {
+    private static final long serialVersionUID = 1L;
+
+    public ConfirmPswWrongException() {
+        super("user.password.not.match.confirmPsw", null);
+    }
+}
